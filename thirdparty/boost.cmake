set(BOOST_ROOT ${CMAKE_SOURCE_DIR}/thirdparty/boost)
set(BOOST_BINARY_DIR ${CMAKE_BINARY_DIR}/thirdparty/boost)

set(BOOST_BJAM_COMMAND ${BOOST_ROOT}/b2 --build-dir=${BOOST_BINARY_DIR} --stagedir=${BOOST_BINARY_DIR})
list(APPEND BOOST_BJAM_COMMAND link=static threading=multi runtime-link=shared)
list(APPEND BOOST_BJAM_COMMAND --with-system --with-filesystem)

if(MSVC)
	set(BOOST_BOOTSTRAP_COMMAND ${BOOST_ROOT}/bootstrap.bat)
	list(APPEND BOOST_BJAM_COMMAND toolset=msvc)
	if(CMAKE_SIZEOF_VOID_P EQUAL 8)
		list(APPEND BOOST_BJAM_COMMAND address-model=64)
	endif()
else()
	set(BOOST_BOOTSTRAP_COMMAND ${BOOST_ROOT}/bootstrap.sh)
	list(APPEND BOOST_BJAM_COMMAND variant=release --layout=tagged)
	if(CMAKE_CXX_COMPILER_ID MATCHES "^(Apple)?Clang$")
		list(APPEND BOOST_BOOTSTRAP_COMMAND --with-toolset=clang)
		list(APPEND BOOST_BJAM_COMMAND toolset=clang)
    elseif(CMAKE_CXX_COMPILER_ID STREQUAL "GNU")
		list(APPEND BOOST_BOOTSTRAP_COMMAND --with-toolset=gcc)
		list(APPEND BOOST_BJAM_COMMAND toolset=gcc)
	endif()
endif()

if(NOT EXISTS ${BOOST_ROOT}/b2 AND NOT EXISTS ${BOOST_ROOT}/b2.exe)
	execute_process(COMMAND ${BOOST_BOOTSTRAP_COMMAND} WORKING_DIRECTORY ${BOOST_ROOT})
endif()
add_custom_command(OUTPUT ${BOOST_BINARY_DIR}/lib
    COMMAND ${BOOST_BJAM_COMMAND} stage
    WORKING_DIRECTORY ${BOOST_ROOT})
add_custom_target(boost DEPENDS ${BOOST_BINARY_DIR}/lib)

set(BOOST_INCLUDE_DIR ${BOOST_ROOT})
foreach(component filesystem system)
    list(APPEND BOOST_INCLUDE_DIR ${BOOST_ROOT}/libs/${component}/include)
	if (NOT MSVC)
		add_library(boost-${component} STATIC IMPORTED GLOBAL)
		set_target_properties(boost-${component} PROPERTIES
			IMPORTED_LOCATION ${BOOST_BINARY_DIR}/lib/libboost_${component}-mt.a)
		add_dependencies(boost-${component} boost)
		list(APPEND BOOST_LIBRARIES boost-${component})
	endif()
endforeach()
